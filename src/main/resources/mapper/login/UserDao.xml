<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper   PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
        "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">
<mapper namespace="com.example.room.dao.UserDao">
    <resultMap id="setUserEntity" type="com.example.room.entity.UserInfo">
        <result column="id" property="id" jdbcType="VARCHAR"/>
        <result column="user_name" property="userName" jdbcType="VARCHAR"/>
        <result column="user_pass" property="userPass" jdbcType="VARCHAR"/>
        <result column="full_name" property="fullName" jdbcType="VARCHAR"/>
        <result column="create_time" property="createTime" jdbcType="DATE"/>
        <result column="create_user" property="createUser" jdbcType="VARCHAR"/>
        <result column="update_time" property="updateTime" jdbcType="DATE"/>
        <result column="update_user" property="updateUser" jdbcType="VARCHAR"/>
        <result column="delete_flag" property="deteleFlag" jdbcType="INTEGER"/>
    </resultMap>
    <!--获取用户信息-->
    <select id="getUserInfo" parameterType="string" resultMap="setUserEntity">
        select id,user_pass,user_name,full_name
        from user
        where user_name=#{userName} and delete_flag = 0
    </select>
    <!--用户注册账号信息-->
    <insert id="userRegister" parameterType="com.example.room.entity.UserInfo">
        insert into user
        (
         id,
         full_name,
         user_name,
         user_pass,
         role_id,
         create_time,
         create_user,
         update_time,
         update_user
        )
        values (
        #{id},
        #{fullName},
        #{userName},
        #{userPass},
        #{roleId},
        #{createTime},
        #{createUser},
        #{updateTime},
        #{updateUser}
        )
    </insert>
    <!--更新用户信息-->
    <update id="userForgetPass" parameterType="com.example.room.entity.UserInfo">
        update user
        <set>
            <if test="null != userPass and '' != userPass">
                user_pass = #{userPass}
            </if>
        </set>
        <where>
            delete_flag = 0
            and user_name = #{userName}
        </where>
    </update>
    <!--更新用户信息-->
    <update id="updateUser" parameterType="com.example.room.entity.UserInfo">
        update user
        <set>
            <if test="null != fullName and '' != fullName">
                full_name = #{fullName},
            </if>
            <if test="null != roleId and '' != roleId">
                role_id = #{roleId},
            </if>
            <if test="null != userPass and '' != userPass">
                user_pass = #{userPass},
            </if>
            <if test="null != updateTime">
                update_time = #{updateTime},
            </if>
            <if test="null != updateUser and '' != updateUser">
                update_user = #{updateUser}
            </if>
        </set>
        <where>
            delete_flag = 0
            and user_name = #{userName}
        </where>
    </update>
    <!--删除用户-->
    <update id="deleteUser" parameterType="com.example.room.entity.UserInfo">
        update user
        <set>
            delete_flag = 1,
            <if test="null != updateTime">
                update_time = #{updateTime},
            </if>
            <if test="null != updateUser and '' != updateUser">
                update_user = #{updateUser}
            </if>
        </set>
        <where>
            <if test="null != userName and '' != userName">
                user_name = #{userName}
            </if>
            <if test="null != userNames and userNames.size()>0">
                and user_name in
                <foreach collection="userNames" separator="," open="(" close=")" item="item">
                    #{item}
                </foreach>
            </if>
        </where>
    </update>
    <!---获取权限-->
    <select id="getAuthorityList" parameterType="com.example.room.entity.UserInfo" resultType="string">
        select a.authority_code
        from user u
        inner join role_authority ra on u.role_id = ra.role_id
        inner join authority a on ra.authority_id = a.id
        where u.user_name = #{userName}
    </select>
    <!--批量获取id-->
    <select id="getUserList" resultType="string">
        select role_id
        from user
        <where>
            delete_flag = 0
            and role_id in
            <foreach collection="list" item="item" close=")" open="(" separator=",">
                #{item}
            </foreach>
        </where>
    </select>
    <!--查询学生所有信息-->
    <select id="getStudentInfo" resultType="com.example.room.entity.dto.StaffInfoDto">
        select r.role_name roleName,u.user_name code,s.student_name name,s.student_phone phone,s.student_sex sex,
           c.college_name collegeName,cs.class_name className
        from user u
        inner join role r on u.role_id = r.id
        inner join student s on u.user_name = s.student_code
        inner join college c on s.college_id = c.id
        inner join class cs on s.class_id = cs.id
        where u.delete_flag = 0 and u.user_name = #{userName}
    </select>
    <!--查询老师所有信息-->
    <select id="getTeacherInfo" resultType="com.example.room.entity.dto.StaffInfoDto">
        select r.role_name roleName,u.user_name  code,s.teacher_name name,s.teacher_phone phone,s.teacher_sex sex,
           c.college_name collegeName
        from user u
        inner join role r on u.role_id = r.id
        inner join teacher s on u.user_name = s.teacher_code
        inner join college c on s.college_id = c.id
        where u.delete_flag = 0 and u.user_name = #{userName}
    </select>
    <!--查询宿管员所有信息-->
    <select id="getStaffInfo" resultType="com.example.room.entity.dto.StaffInfoDto">
        select r.role_name roleName,u.user_name  code,s.staff_name name,s.staff_phone phone,s.staff_sex sex
        from user u
        inner join role r on u.role_id = r.id
        inner join staff s on u.user_name = s.staff_code
        where u.delete_flag = 0 and u.user_name = #{userName}
    </select>
    <!--根据编码获取宿管员信息-->
    <select id="getDataByCode" resultType="com.example.room.entity.UserInfo">
        select *
        from user
        where delete_flag = 0 and user_name = #{code}
    </select>
    <!--用户注册账号信息-->
    <insert id="batchAddUser" parameterType="com.example.room.entity.UserInfo">
        insert into user
        (
         id,
         full_name,
         user_name,
         user_pass,
         role_id,
         create_time,
         create_user,
         update_time,
         update_user
        )values
        <foreach collection="list" item="item" index="index"
                 open="(" separator="),(" close=")">
        #{item.id},
        #{item.fullName},
        #{item.userName},
        #{item.userPass},
        #{item.roleId},
        #{item.createTime},
        #{item.createUser},
        #{item.updateTime},
        #{item.updateUser}
        </foreach>
    </insert>
</mapper>
