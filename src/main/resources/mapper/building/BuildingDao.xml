<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper   PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
        "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">
<mapper namespace="com.example.room.dao.BuildingDao">
    <!--分页查询楼号信息-->
    <select id="getBuildingForPage" resultType="com.example.room.entity.BuildingInfo">
        select b.id,b.building_name buildingName,b.building_code buildingCode,s.staff_name staffName,s.staff_phone
        staffPhone,b.staff_id staffId,b.status
        from building b
        inner join staff s on b.staff_id = s.id
        <where>
            b.delete_flag = 0
            <if test="null != queryString and '' != queryString">
                and b.building_code like concat('%',#{queryString},'%') or b.building_name like
                concat('%',#{queryString},'%')
            </if>
            <if test="null != status and ''!=status">
                and status = #{status}
            </if>
        </where>
    </select>
    <!--编辑楼号信息-->
    <update id="updateBuilding" parameterType="com.example.room.entity.BuildingInfo">
        update building
        <set>
            <if test="null != buildingName and '' != buildingName">
                building_name = #{buildingName},
            </if>
            <if test="null != buildingCode and '' != buildingCode">
                building_code = #{buildingCode},
            </if>
            <if test="null != staffId and '' != staffId">
                staff_id = #{staffId},
            </if>
            <if test="null != status">
                status = #{status},
            </if>
            <if test="null != updateTime">
                update_time = #{updateTime},
            </if>
            <if test="null != updateUser and '' != updateUser">
                update_user = #{updateUser}
            </if>
        </set>
        <where>
            delete_flag = 0
            and id = #{id}
        </where>
    </update>
    <!--新增楼号信息-->
    <insert id="addBuilding" parameterType="com.example.room.entity.BuildingInfo">
        insert into building
        (
        id,
        building_name,
        building_code,
        staff_id,
        create_time,
        create_user,
        update_time,
        update_user
        )values
        (
        #{id},
        #{buildingName},
        #{buildingCode},
        #{staffId},
        #{createTime},
        #{createUser},
        #{updateTime},
        #{updateUser}
        )
    </insert>
    <!--删除楼号信息-->
    <update id="deleteBuilding">
        update building
        set delete_flag =1
        where id = #{id}
    </update>
    <!--根据编码获取楼号信息-->
    <select id="getDataByCode" resultType="com.example.room.entity.BuildingInfo">
        select *
        from building
        where delete_flag = 0 and building_code = #{code}
    </select>
    <!--根据编码获取学生信息-->
    <select id="getDataByCodes" resultType="com.example.room.entity.ClassInfo">
        select id,building_code building_Code,building__name building_Name
        from building
        where delete_flag = 0 and building_code in
        <foreach collection="list" item="item" close=")" open="(" separator=",">
            #{item}
        </foreach>
    </select>
    <!--新增楼号信息-->
    <insert id="batchAddBuilding" parameterType="com.example.room.entity.BuildingInfo">
        insert into building
        (
        id,
        building_name,
        building_code,
        staff_id,
        create_time,
        create_user,
        update_time,
        update_user
        )values
        <foreach collection="list" item="item" index="index"
                 open="(" separator="),(" close=")">
        #{id},
        #{buildingName},
        #{buildingCode},
        #{staffId},
        #{createTime},
        #{createUser},
        #{updateTime},
        #{updateUser}
        </foreach>
    </insert>
    <!--通名称查询宿舍类别数据-->
    <select id="getBuildingByName" resultType="com.example.room.entity.BuildingInfo">
        SELECT
        id,building_name buildingName,building_code buildingCode,status
        FROM building
        WHERE delete_flag = 0 and building_name in
        <foreach collection="list" item="item" close=")" open="(" separator=",">
            #{item}
        </foreach>
    </select>
</mapper>